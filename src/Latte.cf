-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

Field.     ClassProp ::= Type Ident ";" ;
Method.	   ClassProp ::= Type Ident "(" [Arg] ")" Block ;
separator ClassProp "" ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;
ClassDef.  TopDef ::= "class" Ident "{" [ClassProp] "}" ;
ClassDefE. TopDef ::= "class" Ident "extends" Ident "{" [ClassProp] "}" ;
separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;
separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;
Ass.       Stmt ::= Expr7 "=" Expr  ";" ;
Incr.      Stmt ::= Ident "++"  ";" ;
Decr.      Stmt ::= Ident "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
For.       Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.      Stmt ::= Expr ";" ;
separator  Stmt "" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "boolean" ;
Void.      Type ::= "void" ;
Array.     Type ::= Type "[]" ;
ClassType. Type ::= Ident ;
internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- Expressions ---------------------------------------------

Subs.      ESubs ::= Expr6 "[" Expr "]" ;
SubsR.     ESubs ::= ESubs "[" Expr "]" ;
ENull.     Expr8 ::= "(" Type ")null" ;
ESubs.     Expr8 ::= ESubs ;
EVar.      Expr8 ::= Ident ;
EMethod.   Expr7 ::= Expr6 "." Ident "(" [Expr] ")" ;
EField.    Expr7 ::= Expr6 "." Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EArray.    Expr6 ::= "new" Type "[" Expr "]" ;
EString.   Expr6 ::= String ;
EClass.    Expr5 ::= "new" Ident ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 8 ;
separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
